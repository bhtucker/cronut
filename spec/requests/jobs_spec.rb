require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe JobsController, type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {:name => "Test job", :frequency => 3600} }

  let(:headers) { {} }

  before(:all) do
    ENV['CRONUT_PRIVATE_KEY'] = ENV['CRONUT_PRIVATE_KEY'] || OpenSSL::PKey::RSA.generate(1024).to_s
  end

  before(:each) do
    #basic_auth_login
  end

  after(:all) do
    ActiveRecord::Base.connection.reset_pk_sequence!('jobs')
    ActiveRecord::Base.connection.reset_pk_sequence!('notifications')
  end

  context "ping" do

    before(:each) do
      #invalid_basic_auth_login
      @job = IntervalJob.create!({:name => "Test IntervalJob", :frequency => 600})
      token_value = SecureRandom.hex
      @token = ApiToken.create!({
        :name => "Test token",
        :token => token_value
      })
      @str = "#{(Time.now - 5.seconds).to_i.to_s}-#{@job.public_id}"
    end

    after(:each) do
      @job.destroy
      @token.destroy
    end

    describe "POST ping" do
      it "ignores pings with unencrypted public id" do
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        expect {
          post "/ping", {:public_id => @str}, headers
        }.to raise_error(ActiveRecord::RecordNotFound)
        @job.reload
        @job.last_successful_time.should be_nil
      end

      it "ignores pings with encrypted wrong id" do
        wrong_str = "#{Time.now.to_i.to_s}-abc"
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        expect {
          post "/ping", {:public_id => Encryptor.encrypt(wrong_str)}, headers
        }.to raise_error(ActiveRecord::RecordNotFound)
        @job.reload
        @job.last_successful_time.should be_nil
      end

      it "ignores pings with encrypted wrong date" do
        wrong_str = "#{(Time.now - 31.seconds).to_i.to_s}-#{@job.public_id}"
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        expect {
          post "/ping", {:public_id => Encryptor.encrypt(wrong_str)}, headers
        }.to raise_error(ActiveRecord::RecordNotFound)
        @job.reload
        @job.last_successful_time.should be_nil
      end

      it "pings with valid token" do
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        post "/ping", {:public_id => Encryptor.encrypt(@str)}, headers
        @job.reload
        response.status.should eq 200
        @job.last_successful_time.should_not be_nil
      end

      it "pings with valid token and a base 64 payload" do
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        post "/ping", {:public_id => Base64.strict_encode64(Encryptor.encrypt(@str)), use_base64: true}, headers
        @job.reload
        response.status.should eq 200
        @job.last_successful_time.should_not be_nil
      end
    end

    describe "POST v2/ping" do
      it "pings with valid token and a base64 encoded payload" do
        headers[JobsController::API_TOKEN_HEADER] = @token.token
        post '/v2/ping', {:public_id => Base64.strict_encode64(Encryptor.encrypt(@str))}, headers
        @job.reload
        response.status.should eq 200
        @job.last_successful_time.should_not be_nil
      end
    end
  end
end
